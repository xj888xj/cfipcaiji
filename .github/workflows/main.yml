name: Update IP List

on:
  schedule:
    - cron: '0 */4 * * *' # 每4小时运行一次
  workflow_dispatch: # 允许手动触发
  #push: # 允许提交触发

jobs:

  update-ip-list:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4
        
    - name: Run IP collection script
      run: |
        python << EOF
        import requests
        from bs4 import BeautifulSoup
        import re
        import os

        # 目标 URL 列表
        urls = [
            'https://www.182682.xyz/page/cloudflare/ipv4.html', 
            'https://ip.164746.xyz',
            'https://cf.090227.xyz/'
        ]
        
        # 正则表达式用于匹配 IP 地址
        ip_pattern = r'\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}'
        
        # 检查 ip.txt 文件是否存在，如果存在则删除它
        if os.path.exists('ip.txt'):
            os.remove('ip.txt')
        
        # 创建一个集合来存储唯一的 IP 地址
        unique_ips = set()
        
        # 创建一个文件来存储 IP 地址
        with open('ip.txt', 'w') as file:
            for url in urls:
                try:
                    # 发送 HTTP 请求获取网页内容
                    response = requests.get(url)
                    response.raise_for_status()  # 检查请求是否成功
                    
                    # 使用 BeautifulSoup 解析 HTML
                    soup = BeautifulSoup(response.text, 'html.parser')
                    
                    # 根据网站的不同结构找到包含 IP 地址的元素
                    if url == 'https://ip.164746.xyz':
                        elements = soup.find_all('tr')
                    elif url == 'https://www.182682.xyz/page/cloudflare/ipv4.html':
                        elements = soup.find_all('tr')
                    elif url == 'https://cf.090227.xyz/':
                        elements = soup.find_all('tr')
                    else:
                        elements = soup.find_all('li')  # 默认选择
                    
                    # 遍历所有元素，查找 IP 地址
                    for element in elements:
                        element_text = element.get_text()
                        ip_matches = re.findall(ip_pattern, element_text)
                        
                        # 如果找到 IP 地址，则添加到集合
                        unique_ips.update(ip_matches)
        
                except requests.RequestException as e:
                    print(f"请求失败: {e}")
        
            # 将唯一的 IP 地址写入文件
            for ip in unique_ips:
                file.write(ip + '\n')
        
        print('IP 地址已保存到 ip.txt 文件中。')
        EOF
        
    - name: Commit and push changes
      run: |
        git config --global user.email "tianshideyou@proton.me"
        git config --global user.name "tianshipapa"
        if [ -n "$(git status --porcelain)" ]; then
          git add ip.txt
          git commit -m "Automatic update"
          git push
        else
          echo "No changes detected, skipping commit."
        fi
